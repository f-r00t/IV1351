-- Create the Student table
CREATE TABLE Student (
    student_id SERIAL PRIMARY KEY,
    person_number VARCHAR(20) NOT NULL UNIQUE,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(200),
    contact_details VARCHAR(200),
    contact_person VARCHAR(100),
    sibling_group INT
);

-- Create the Instructor table
CREATE TABLE Instructor (
    instructor_id SERIAL PRIMARY KEY,
    person_number VARCHAR(20) NOT NULL UNIQUE,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(200),
    contact_details VARCHAR(200)
);

-- Create the Lesson table
CREATE TABLE Lesson (
    lesson_id SERIAL PRIMARY KEY,
    lesson_type VARCHAR(20) CHECK (lesson_type IN ('Individual', 'Group', 'Ensemble')),
    instrument VARCHAR(50) NOT NULL,
    level VARCHAR(20) CHECK (level IN ('Beginner', 'Intermediate', 'Advanced')),
    schedule TIMESTAMP NULL,
    max_students INT,
    min_students INT,
    instructor_id INT REFERENCES Instructor(instructor_id)
);

-- Create the Student_Lesson table for many-to-many relationship
CREATE TABLE Student_Lesson (
    student_id INT REFERENCES Student(student_id) ON DELETE CASCADE,
    lesson_id INT REFERENCES Lesson(lesson_id) ON DELETE CASCADE,
    PRIMARY KEY (student_id, lesson_id)
);

-- Create the Instrument_Rental table
CREATE TABLE Instrument_Rental (
    rental_id SERIAL PRIMARY KEY,
    student_id INT REFERENCES Student(student_id) ON DELETE CASCADE,
    instrument VARCHAR(100) NOT NULL,
    rental_start DATE NOT NULL,
    rental_end DATE,
    monthly_fee NUMERIC(10, 2) NOT NULL
);

-- Create the Payment table
CREATE TABLE Payment (
    payment_id SERIAL PRIMARY KEY,
    student_id INT REFERENCES Student(student_id) ON DELETE CASCADE,
    payment_date DATE NOT NULL,
    amount NUMERIC(10, 2) NOT NULL,
    description VARCHAR(200)
);

-- Create the Price_History table for flexible pricing
CREATE TABLE Price_History (
    price_id SERIAL PRIMARY KEY,
    lesson_type VARCHAR(20),
    level VARCHAR(20),
    price NUMERIC(10, 2) NOT NULL,
    valid_from DATE NOT NULL,
    valid_to DATE
);
